
plugins {
    id 'pmd'
    id 'maven-publish'
    id 'com.adarshr.test-logger'
    id "com.diffplug.spotless"
    id "com.github.spotbugs"
    id "org.gradle.test-retry"
    id 'io.freefair.lombok'
    id "org.springframework.boot"  apply false
    id "io.spring.dependency-management"
}

apply plugin: 'java'
apply from: "$rootDir/tasks/revisions.gradle"


allprojects {
    apply plugin: 'idea'
    apply plugin: "signing"
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: "com.diffplug.spotless"
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom "io.sunshower.zephyr:bom-imported:$project.version"
        }
    }


    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://repository.mulesoft.org/nexus/content/repositories/public/"
        }
        maven {
            url "https://maven.pkg.github.com/sunshower-io/*"
            credentials {
                username "$mavenRepositoryUsername"
                password "$mavenRepositoryPassword"
            }
        }
    }


}

subprojects {

    apply plugin: 'maven-publish'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.gradle.test-retry'
    publishing {
        repositories {
            maven {
                credentials {
                    username "$mavenRepositoryUsername"
                    password "$mavenRepositoryPassword"
                }
                url "$mavenRepositoryUrl"
            }
        }
    }

    spotbugs {
        toolVersion = '4.5.3'
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    plugins.withType(WarPlugin) {
        configurations {
            plugin {
                transitive = false
                extendsFrom implementation
            }
        }


//        tasks.withType(com.github.spotbugs.SpotBugsTask) {
//            reports {
//                xml.enabled = false
//                html.enabled = true
//            }
//        }
        pmd {
            toolVersion = '6.34.0'
            ruleSets = [
                    "${project.rootDir}/check/pmd/rules/errorprone.xml",
                    "category/java/multithreading.xml",
                    "category/java/bestpractices.xml",
                    "category/java/performance.xml"
            ]

        }

        publishing {
            publications {
                pluginMaven(MavenPublication) {
                    from components.web

                    /**
                     * maven coordinates
                     */
                    groupId = project.group
                    version = project.version
                    artifactId = project.name

                    /**
                     * included artifacts
                     */


                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    pom {
                        name = 'Sunshower Arcus'
                        description = 'Sunshower Core Libraries'
                        url = 'https://github.com/sunshower-io/sunshower-arcus'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'josiah'
                                name = 'Josiah Haswell'
                                email = 'josiah@sunshower.io'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/sunshower-io/sunshower-arcus.git'
                            developerConnection = 'scm:git:ssh://github.com/sunshower-io/sunshower-arcus.git'
                            url = 'https://www.sunshower.io/'
                        }
                    }
                }
            }
        }
    }


    plugins.withType(JavaPlugin) {
        publishing {
            publications {


                pluginMaven(MavenPublication) {
                    /**
                     * maven coordinates
                     */
                    groupId = project.group
                    version = project.version
                    artifactId = project.name

                    /**
                     * included artifacts
                     */

                    artifact jar
                    artifact testJar
                    artifact sourcesJar
                    artifact javadocJar

                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    pom {
                        name = 'Sunshower Zephyr'
                        description = 'Sunshower Zephyr Plugin Framework'
                        url = 'https://github.com/sunshower-io/zephyr'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'josiah'
                                name = 'Josiah Haswell'
                                email = 'josiah@sunshower.io'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/sunshower-io/sunshower-arcus.git'
                            developerConnection = 'scm:git:ssh://github.com/sunshower-io/sunshower-arcus.git'
                            url = 'https://www.sunshower.io/'
                        }
                    }
                }
            }

        }

        signing {
            useGpgCmd()
            sign publishing.publications.pluginMaven
        }

        tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
        pmd {
            toolVersion = '6.34.0'
            ruleSets = [
                    "${project.rootDir}/check/pmd/rules/errorprone.xml",
                    "category/java/multithreading.xml",
                    "category/java/bestpractices.xml",
                    "category/java/performance.xml"
            ]

        }

        test {
            useJUnitPlatform()
            retry {
                maxRetries = 5
                maxFailures = 5
            }
        }
        spotless {
            java {
                googleJavaFormat('1.12.0')
            }
        }

        dependencies {

            compileOnly 'com.github.spotbugs:spotbugs-annotations'
            testCompileOnly 'com.github.spotbugs:spotbugs-annotations'

            implementation 'io.sunshower.arcus.annotations:arcus-jsr-305'
            testImplementation 'io.sunshower.arcus.annotations:arcus-jsr-305'

            compileOnly 'org.projectlombok:lombok'
            testCompileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            testAnnotationProcessor 'org.projectlombok:lombok'


            testImplementation 'org.mockito:mockito-inline'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'

            [
                    'api',
                    'engine'

            ].each { dep ->
                testImplementation "org.junit.jupiter:junit-jupiter-$dep"
                testImplementation "org.junit.platform:junit-platform-suite-$dep"
            }
        }
    }

}

defaultTasks(
        'clean',
        'assemble',
        'build',
        'spotlessApply',
        'javadoc',
        'publishToMavenLocal'
)


build.dependsOn assemble
